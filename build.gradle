buildscript {
    repositories {
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath group: 'org.zeroturnaround', name: 'gradle-jrebel-plugin', version: '1.1.3'
    }
}

allprojects {
    apply plugin: 'rebel'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'net.minecraftforge.gradle.forge'
    apply plugin: 'org.spongepowered.mixin'

    jar.dependsOn(generateRebel)

    sourceCompatibility = targetCompatibility = "1.8"

    minecraft {
        version = "1.10.2-12.18.1.2073"
        runDir = "run"
        mappings = "snapshot_20160824"
        makeObfSourceJar = false
    }

    runClient {
        systemProperty "environment", "development"
        systemProperty "mixin.debug", "true"
        systemProperty "mixin.dumpTargetOnFailure", "true"
        systemProperty "mixin.checks", "true"
        jvmArgs = [
                "-javaagent:C:\\Users\\Jesse\\Development\\Tools\\mixin-0.5.11-SNAPSHOT.jar",
                "-javaagent:C:\\Users\\Jesse\\Development\\Tools\\jrebel\\jrebel.jar",
                "-Drebel.log=true",
                "-Drebel.plugins=C:\\Users\\Jesse\\Development\\Tools\\jr-minecraft-plugin.jar"
        ]
    }

    sourceSets {
        main {
            refMap = "mixins." + project.projectDir.name + ".refmap.json"
            output.resourcesDir = output.classesDir
        }
    }

    def commonManifest = {
        mainAttributes(
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0,
                "MixinConfigs": "mixins."  + project.projectDir.name +  ".json",
                'ForceLoadAsMod': 'true'
        )
    }
    jar.manifest commonManifest

    // Create a JAR based on deobfuscated code
    task deobfJar(type: Jar) {
        manifest commonManifest
        from sourceSets.main.output
        classifier = 'dev'
    }

    // Reobfuscate to SRG mappings
    reobf.jar.mappingType = 'SEARGE'

    repositories {
        flatDir {
            dirs("$rootProject.projectDir/libs")
        }
        maven {
            name = 'sponge-public'
            url = 'http://repo.spongepowered.org/maven/'
        }
    }

    processResources {
        // this will ensure that this task is redone when the versions change.
        inputs.property "version", project.version
        inputs.property "mcversion", project.minecraft.version

        // replace stuff in mcmod.info, nothing else
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'

            // replace version and mcversion
            expand 'version': project.version, 'mcversion': project.minecraft.version
        }

        // copy everything else, thats not the mcmod.info
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
        }
    }
}

subprojects {
    buildDir = rootProject.buildDir.absolutePath + "/" + project.name
    rootProject.tasks.runClient.classpath += sourceSets.main.output
    rootProject.tasks.runServer.classpath += sourceSets.main.output

    dependencies {
        testCompile 'junit:junit:4.12'
        compile('org.spongepowered:mixin:0.5.11-SNAPSHOT') {
            exclude module: 'launchwrapper'
            exclude module: 'guava'
        }
    }
}

dependencies {
    compile project(':mcore'), project(':mclimate'), project(':mfish'), project(':mfarm'), project(':mmetallurgy')
}