buildscript {
    ext.kotlin_version = '1.0.5-3'
    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = 'sponge'
            url = 'http://repo.spongepowered.org/maven'
        }
        maven {
            name = 'sonatype-nexus'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.2-SNAPSHOT'
        classpath 'org.spongepowered:mixingradle:0.4-SNAPSHOT'
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

allprojects {
    apply plugin: "kotlin"
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'net.minecraftforge.gradle.forge'
    apply plugin: 'org.spongepowered.mixin'

    sourceCompatibility = targetCompatibility = "1.8"

    minecraft {
        version = "1.11.2-13.20.0.2214"
        runDir = "run"
        mappings = 'snapshot_20170105'
        makeObfSourceJar = false
    }

    sourceSets {
        main {
            refMap = "mixins." + project.projectDir.name + ".refmap.json"
            output.resourcesDir = output.classesDir
        }
        main.kotlin.srcDirs = main.java.srcDirs
    }

    def commonManifest = {
        mainAttributes(
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "MixinConfigs": "mixins." + project.projectDir.name + ".json",
                'ForceLoadAsMod': 'true'
        )
    }
    jar.manifest commonManifest

    // Create a JAR based on deobfuscated code
    task deobfJar(type: Jar) {
        manifest commonManifest
        from sourceSets.main.output
        classifier = 'dev'
    }

    repositories {
        mavenCentral()
        jcenter()
        maven {
            name = 'sponge-public'
            url = 'http://repo.spongepowered.org/maven/'
        }
        maven {
            name = 'sonatype-nexus'
            url = 'https://oss.sonatype.org/content/repositories/public/'
        }
        maven { url 'https://jitpack.io' }
        flatDir {
            dirs("$rootProject.projectDir/libs")
        }
    }

    tasks.withType(JavaCompile) {
        options.incremental = true // one flag, and things will get MUCH faster
    }

    // Fixes an issue where the httpclient forge brings in messes with Unirest
    configurations.all {
        resolutionStrategy {
            forcedModules = ['org.apache.httpcomponents:httpclient:4.5.2']
        }
    }
}

subprojects {
    // Execute all of this once the subproject .gradle file is evaluated,
    // making 'project' contain anything we set in the subproject file
    afterEvaluate { project ->
        buildDir = rootProject.buildDir.absolutePath + "/" + project.name

        tasks.withType(Jar) {
            destinationDir = file(rootProject.buildDir.absolutePath + "/jars")
        }

        // Replace special strings in our code with values we've set in our build scripts
        minecraft {
            replace('$VERSION', project.version)
        }

        dependencies {
            testCompile 'junit:junit:4.12'
            compile('org.spongepowered:mixin:0.6.4-SNAPSHOT') {
                exclude module: 'launchwrapper'
                exclude module: 'guava'
            }
            compile 'com.github.Ordinastie:MalisisCore:1.11-SNAPSHOT'
            compile 'com.typesafe:config:1.3.1'
            compile 'com.mashape.unirest:unirest-java:1.4.9'
            compile 'org.apache.commons:commons-math3:3.6.1'
            compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
        }

        // Rename the location of certain dependencies to prevent runtime conflicts in production
        reobfJar {
            addExtraSrgLine "PK: com/mashape/unirest com/mordrum/shade/com/mashape"
            addExtraSrgLine "PK: org/apache/http com/mordrum/shade/org/apache/http"
        }

        processResources {
            // this will ensure that this task is redone when the versions change.
            inputs.property "version", project.version
            inputs.property "mcversion", project.minecraft.version

            from(sourceSets.main.resources.srcDirs) {
                include 'mcmod.info'
                expand([
                        'modid'     : project.name.toLowerCase(),
                        'name'      : project.name,
                        'authorList': ['SirSavary'],
                        'version'   : project.version,
                        'mcversion' : project.minecraft.version
                ])
            }
        }
    }
}

dependencies {
    compile project(':mcore'), project(':mclimate'), project(':mfish'), project(':mfarm'), project(':mmetallurgy'), project(':mciv')
}